/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vigenere;

import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import java.io.File;  // Import the File class
import java.io.IOException;  // Import the IOException class to handle errors
import java.io.FileWriter;   // Import the FileWriter class
import java.awt.Desktop;
import java.io.FileNotFoundException;
import java.text.Normalizer;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author RaulLaboriel_Zafra
 */
public class Vigenere extends javax.swing.JFrame {

    public File archivoAEncriptar;
    public File archivoEncriptado;
    private String fileSeparador = File.separator;

    /**
     * Creates new form VigenereJFrame
     */
    public Vigenere() {
        initComponents();
        this.abrirCarpetaBtn.setEnabled(false);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cifrarArchivoBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        claveTxtField = new javax.swing.JTextField();
        abrirCarpetaBtn = new javax.swing.JButton();
        seleccionarArchivoBtn = new javax.swing.JToggleButton();
        nombreDelArchivoLbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textoCifradojTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cifrado de Vigenère | Los Hackers");
        setResizable(false);

        cifrarArchivoBtn.setBackground(new java.awt.Color(0, 102, 255));
        cifrarArchivoBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        cifrarArchivoBtn.setForeground(new java.awt.Color(255, 255, 255));
        cifrarArchivoBtn.setText("Cifrar");
        cifrarArchivoBtn.setEnabled(false);
        cifrarArchivoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cifrarArchivoBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Texto cifrado:");

        jLabel3.setText("Clave:");

        claveTxtField.setText("Hipotenusa");

        abrirCarpetaBtn.setText("Abrir carpeta contenedora");
        abrirCarpetaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirCarpetaBtnActionPerformed(evt);
            }
        });

        seleccionarArchivoBtn.setText("Seleccionar archivo...");
        seleccionarArchivoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarArchivoBtnActionPerformed(evt);
            }
        });

        textoCifradojTextArea.setEditable(false);
        textoCifradojTextArea.setColumns(20);
        textoCifradojTextArea.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        textoCifradojTextArea.setForeground(new java.awt.Color(0, 0, 0));
        textoCifradojTextArea.setRows(5);
        textoCifradojTextArea.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        textoCifradojTextArea.setEnabled(false);
        jScrollPane1.setViewportView(textoCifradojTextArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(195, 195, 195)
                        .addComponent(cifrarArchivoBtn))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(nombreDelArchivoLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(seleccionarArchivoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(abrirCarpetaBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(claveTxtField)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE))))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(seleccionarArchivoBtn)
                    .addComponent(nombreDelArchivoLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(claveTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cifrarArchivoBtn)
                .addGap(2, 2, 2)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(abrirCarpetaBtn)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cifrarArchivoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cifrarArchivoBtnActionPerformed
        // TODO add your handling code here:
        StringBuilder textoACifrar = new StringBuilder();
        String clave = this.claveTxtField.getText().trim().toLowerCase();

        if (!esClaveValida(clave) || clave.equals("")) {
            JOptionPane.showMessageDialog(null, "Por favor ingrese una clave válida.");
            return;
        }

        try {
            Scanner leedorDeArchivo = new Scanner(archivoAEncriptar);
            while (leedorDeArchivo.hasNextLine()) {
                String data = leedorDeArchivo.nextLine();
                textoACifrar.append(data);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Vigenere.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (textoACifrar.equals("")) {
            JOptionPane.showMessageDialog(null, "Por favor ingrese el texto a cifrar.");
            return;
        }

        if (!esTextoACifrarValido(textoACifrar.toString().toLowerCase())) {
            JOptionPane.showMessageDialog(null, "Por favor verifique que la cadena a cifrar tenga solo caracteres válidos (a - z) o espacios.");
            return;
        }

        String textoCifrado = obtenerFraseCodificada(textoACifrar.toString(), clave);
        this.textoCifradojTextArea.setText(textoCifrado);
        this.textoCifradojTextArea.setLineWrap(true);

        try {
            String rutaDelArchivo = archivoAEncriptar.getAbsoluteFile().getParent() + fileSeparador + archivoAEncriptar.getName().replaceAll(".txt", "") + "C.txt";
            File textoCifradoFile = new File(rutaDelArchivo);

            FileWriter myWriter = new FileWriter(textoCifradoFile);

            myWriter.write(textoCifrado);
            myWriter.close();

            if (textoCifradoFile.exists()) {
                archivoEncriptado = textoCifradoFile;
            }

            Desktop.getDesktop().open(archivoAEncriptar);
            Desktop.getDesktop().open(textoCifradoFile);
            this.abrirCarpetaBtn.setEnabled(true);
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
    }//GEN-LAST:event_cifrarArchivoBtnActionPerformed

    private void abrirCarpetaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirCarpetaBtnActionPerformed
        // TODO add your handling code here:
        if (archivoEncriptado.exists()) {
            try {
                Desktop.getDesktop().open(new File(archivoEncriptado.getAbsoluteFile().getParent()));
            } catch (IOException e) {
                System.out.println("An error occurred.");
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_abrirCarpetaBtnActionPerformed

    private void seleccionarArchivoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarArchivoBtnActionPerformed
        // TODO add your handling code here:
        JFileChooser seleccionadorDeArchivos = new JFileChooser();

        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
        seleccionadorDeArchivos.setFileFilter(filter);

        seleccionadorDeArchivos.showOpenDialog(null);
        File archivoSeleccionado = seleccionadorDeArchivos.getSelectedFile();
        archivoAEncriptar = archivoSeleccionado;
        this.nombreDelArchivoLbl.setText(archivoSeleccionado.getName());
        this.cifrarArchivoBtn.setEnabled(true);
    }//GEN-LAST:event_seleccionarArchivoBtnActionPerformed

    public static String quitarAcentos(String s) {
        /*Salvamos las ñ*/
        s = s.replace('ñ', '\001');
        s = s.replace('Ñ', '\002');
        s = Normalizer.normalize(s, Normalizer.Form.NFD);
        s = s.replaceAll("[\\p{InCombiningDiacriticalMarks}]", "");
        /*Volvemos las ñ a la cadena*/
        s = s.replace('\001', 'ñ');
        s = s.replace('\002', 'Ñ');

        return s;
    }

    private static String obtenerFraseCodificada(
            String frase,
            String clave
    ) {
        String[] arrayFrase = quitarAcentos(frase.toLowerCase().trim()).replaceAll(" ", "").split("");
        StringBuilder fraseCodificada = new StringBuilder();

        for (int i = 0; i < arrayFrase.length; i++) {
            String charClave = String.valueOf(quitarAcentos(clave.toLowerCase().trim()).charAt(i % clave.length()));
            String charTexto = arrayFrase[i];
            fraseCodificada.append(obtenerCaracterCifrado(charClave, charTexto));
        }

        for (int i = 0; i < frase.split("").length; i++) {
            if (frase.charAt(i) == ' ') {
                String substring = fraseCodificada.substring(i);
                fraseCodificada.setCharAt(i, ' ');
                fraseCodificada = new StringBuilder(fraseCodificada.substring(0, i + 1) + substring);
            }
        }

        return fraseCodificada.toString();
    }

    private static String obtenerCaracterCifrado(
            String charClave,
            String charTexto
    ) {
        Map<String, Integer> alfabeto = new HashMap<>();
        alfabeto.put("a", 0);
        alfabeto.put("b", 1);
        alfabeto.put("c", 2);
        alfabeto.put("d", 3);
        alfabeto.put("e", 4);
        alfabeto.put("f", 5);
        alfabeto.put("g", 6);
        alfabeto.put("h", 7);
        alfabeto.put("i", 8);
        alfabeto.put("j", 9);
        alfabeto.put("k", 10);
        alfabeto.put("l", 11);
        alfabeto.put("m", 12);
        alfabeto.put("n", 13);
        alfabeto.put("ñ", 14);
        alfabeto.put("o", 15);
        alfabeto.put("p", 16);
        alfabeto.put("q", 17);
        alfabeto.put("r", 18);
        alfabeto.put("s", 19);
        alfabeto.put("t", 20);
        alfabeto.put("u", 21);
        alfabeto.put("v", 22);
        alfabeto.put("w", 23);
        alfabeto.put("x", 24);
        alfabeto.put("y", 25);
        alfabeto.put("z", 26);

        Map<Integer, String> alfabetoInvertido = new HashMap<>();
        alfabetoInvertido.put(0, "a");
        alfabetoInvertido.put(1, "b");
        alfabetoInvertido.put(2, "c");
        alfabetoInvertido.put(3, "d");
        alfabetoInvertido.put(4, "e");
        alfabetoInvertido.put(5, "f");
        alfabetoInvertido.put(6, "g");
        alfabetoInvertido.put(7, "h");
        alfabetoInvertido.put(8, "i");
        alfabetoInvertido.put(9, "j");
        alfabetoInvertido.put(10, "k");
        alfabetoInvertido.put(11, "l");
        alfabetoInvertido.put(12, "m");
        alfabetoInvertido.put(13, "n");
        alfabetoInvertido.put(14, "ñ");
        alfabetoInvertido.put(15, "o");
        alfabetoInvertido.put(16, "p");
        alfabetoInvertido.put(17, "q");
        alfabetoInvertido.put(18, "r");
        alfabetoInvertido.put(19, "s");
        alfabetoInvertido.put(20, "t");
        alfabetoInvertido.put(21, "u");
        alfabetoInvertido.put(22, "v");
        alfabetoInvertido.put(23, "w");
        alfabetoInvertido.put(24, "x");
        alfabetoInvertido.put(25, "y");
        alfabetoInvertido.put(26, "z");

        int clave = alfabeto.get(charClave);
        int texto = alfabeto.get(charTexto);
        int resultado = (clave + texto) <= 26 ? (clave + texto) : (clave + texto) % 27;
        return alfabetoInvertido.get(resultado);
    }

    public static boolean esTextoACifrarValido(String textoACifrar) {
        boolean esTextoValido = true;
        
        String textAVericar = quitarAcentos(textoACifrar.toLowerCase().trim());

        for (int i = 0; i < textAVericar.length(); i++) {
            int asciiCode = (int) textAVericar.charAt(i);

            if ((asciiCode < 97 && asciiCode != 32) || (asciiCode > 122 && asciiCode != 241)) {
                esTextoValido = false;
                break;
            }
        }

        return esTextoValido;
    }

    public static boolean esClaveValida(String clave) {
        boolean esTextoValido = true;
        
        String textAVericar = quitarAcentos(clave.toLowerCase().trim());

        for (int i = 0; i < textAVericar.length(); i++) {
            int asciiCode = (int) textAVericar.charAt(i);

            if (asciiCode < 97 || (asciiCode > 122 && asciiCode != 241)) {
                esTextoValido = false;
                break;
            }
        }

        return esTextoValido;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abrirCarpetaBtn;
    private javax.swing.JButton cifrarArchivoBtn;
    private javax.swing.JTextField claveTxtField;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nombreDelArchivoLbl;
    private javax.swing.JToggleButton seleccionarArchivoBtn;
    private javax.swing.JTextArea textoCifradojTextArea;
    // End of variables declaration//GEN-END:variables
}
